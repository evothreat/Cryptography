import os

from utils import pkcs7_pad_bytes, pkcs7_unpad_bytes, text2bytes, bytes2text

S_BOX = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
]

INV_S_BOX = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
]


def mult(a, b):
    p = 0
    for _ in range(8):
        if b & 1:
            p ^= a
        hi_bit_set = a & 0x80
        a <<= 1
        a &= 0xff
        if hi_bit_set:
            a ^= 0x1b
        b >>= 1
    return p


def _sub_bytes(state, s_box):
    for i in range(4):
        for j in range(4):
            state[i][j] = s_box[state[i][j]]


def sub_bytes(state):
    return _sub_bytes(state, S_BOX)


def inv_sub_bytes(state):
    return _sub_bytes(state, INV_S_BOX)


def shift_rows(state):
    for i in range(1, 4):
        state[i] = state[i][i:] + state[i][:i]


def inv_shift_rows(state):
    for i in range(1, 4):
        state[i] = state[i][-i:] + state[i][:-i]


def mix_columns(state):
    for i in range(4):
        col = [state[j][i] for j in range(4)]
        state[0][i] = mult(col[0], 2) ^ mult(col[1], 3) ^ col[2] ^ col[3]   # 2 * a0 + 3 * a1 + 1 * a2 + 1 * a3
        state[1][i] = col[0] ^ mult(col[1], 2) ^ mult(col[2], 3) ^ col[3]   # 1 * a0 + 2 * a1 + 3 * a2 + 1 * a3
        state[2][i] = col[0] ^ col[1] ^ mult(col[2], 2) ^ mult(col[3], 3)   # 1 * a0 + 1 * a1 + 2 * a2 + 3 * a3
        state[3][i] = mult(col[0], 3) ^ col[1] ^ col[2] ^ mult(col[3], 2)   # 3 * a0 + 1 * a1 + 1 * a2 + 2 * a3


def inv_mix_columns(state):
    for i in range(4):
        col = [state[j][i] for j in range(4)]
        state[0][i] = mult(col[0], 14) ^ mult(col[1], 11) ^ mult(col[2], 13) ^ mult(col[3], 9)
        state[1][i] = mult(col[0], 9) ^ mult(col[1], 14) ^ mult(col[2], 11) ^ mult(col[3], 13)
        state[2][i] = mult(col[0], 13) ^ mult(col[1], 9) ^ mult(col[2], 14) ^ mult(col[3], 11)
        state[3][i] = mult(col[0], 11) ^ mult(col[1], 13) ^ mult(col[2], 9) ^ mult(col[3], 14)


def add_round_key(state, round_key):
    for i in range(4):
        for j in range(4):
            # Since round_key is a list of columns, we need to transpose it by swapping i and j
            state[i][j] ^= round_key[j][i]


def rot_word(word):
    return word[1:] + word[:1]


def sub_word(word):
    return [S_BOX[b] for b in word]


def key_expansion(key):
    rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54]

    # Break the key into 4-byte words
    w = [key[i:i + 4] for i in range(0, len(key), 4)]

    for i in range(4, 44):
        temp = w[i - 1]

        if i % 4 == 0:
            temp = sub_word(rot_word(temp))
            temp[0] ^= rcon[i // 4 - 1]

        w_i = [w[i - 4][j] ^ temp[j] for j in range(4)]
        w.append(w_i)

    return [w[i:i + 4] for i in range(0, len(w), 4)]


# AES operates on a 4x4 matrix of bytes in column-major order (if 128-bit blocks are used)
# For example, the bytes are arranged as follows: B = [b0, b1, b2, ..., b15]
# The state matrix is then:
# S = [[b0, b4, b8, b12],
#      [b1, b5, b9, b13],
#      [b2, b6, b10, b14],
#      [b3, b7, b11, b15]]
def array2matrix(arr):
    return [
        [arr[i], arr[i + 4], arr[i + 8], arr[i + 12]] for i in range(0, 4)
    ]


def matrix2array(mx):
    return [mx[i][j] for j in range(4) for i in range(4)]


def aes_encrypt_block(block, round_keys):
    # Create a 4x4 matrix from the block
    state = array2matrix(block)

    add_round_key(state, round_keys[0])

    for i in range(1, len(round_keys) - 1):
        sub_bytes(state)
        shift_rows(state)
        mix_columns(state)
        add_round_key(state, round_keys[i])

    # Final round without mix_columns
    sub_bytes(state)
    shift_rows(state)
    add_round_key(state, round_keys[-1])

    # Flatten the state matrix into a list
    return matrix2array(state)


def aes_encrypt(plaintext, key):
    ciphertext = []
    # Generate n round keys from the key (n = 11 for AES-128)
    round_keys = key_expansion(key)

    # Break the plaintext into 16-byte blocks and encrypt each block
    for i in range(0, len(plaintext), 16):
        block = plaintext[i:i + 16]
        encrypted_block = aes_encrypt_block(block, round_keys)
        ciphertext.extend(encrypted_block)

    return ciphertext


def aes_decrypt_block(block, round_keys):
    state = array2matrix(block)

    add_round_key(state, round_keys[-1])
    inv_shift_rows(state)
    inv_sub_bytes(state)

    for i in range(len(round_keys) - 2, 0, -1):
        add_round_key(state, round_keys[i])
        inv_mix_columns(state)
        inv_shift_rows(state)
        inv_sub_bytes(state)

    add_round_key(state, round_keys[0])

    return matrix2array(state)


def aes_decrypt(ciphertext, key):
    plaintext = []
    round_keys = key_expansion(key)

    for i in range(0, len(ciphertext), 16):
        block = ciphertext[i:i + 16]
        decrypted_block = aes_decrypt_block(block, round_keys)
        plaintext.extend(decrypted_block)

    return plaintext


def main():
    key = os.urandom(16)
    plaintext = "Hello, my name is AES!"
    ciphertext = aes_encrypt(pkcs7_pad_bytes(text2bytes(plaintext), 16), key)
    decrypted = bytes2text(pkcs7_unpad_bytes(aes_decrypt(ciphertext, key)))

    print("Plaintext:", plaintext)
    print("Ciphertext:", ciphertext)
    print("Decrypted:", decrypted)


if __name__ == "__main__":
    main()
